name: Sync Problems from Admin Repository

on:
  workflow_dispatch:
    inputs:
      problem_name:
        description: "Name of the problem to sync"
        required: true
        type: string
      source_repo:
        description: "Source repository name"
        required: true
        type: string
      source_owner:
        description: "Source repository owner"
        required: true
        type: string
  repository_dispatch:
    types: [sync-problems]

jobs:
  sync:
    runs-on: ubuntu-latest

    env:
      PRISMA_SCHEMA_PATH: packages/db/prisma/schema.prisma

    steps:
      - name: Checkout web repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm install

      - name: Extract event inputs
        id: extract
        run: |
          # For workflow_dispatch
          if [ -n "${{ github.event.inputs.problem_name }}" ]; then
            echo "problem_name=${{ github.event.inputs.problem_name }}" >> $GITHUB_ENV
            echo "source_owner=${{ github.event.inputs.source_owner }}" >> $GITHUB_ENV
            echo "source_repo=${{ github.event.inputs.source_repo }}" >> $GITHUB_ENV
          else
            # For repository_dispatch
            echo "problem_name=${{ github.event.client_payload.problem_name }}" >> $GITHUB_ENV
            echo "source_owner=${{ github.event.client_payload.source_owner }}" >> $GITHUB_ENV
            echo "source_repo=${{ github.event.client_payload.source_repo }}" >> $GITHUB_ENV
          fi

      - name: Download processed problem
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.ADMIN_REPO_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            const { execSync } = require('child_process');

            const problemName = process.env.problem_name;
            const sourceOwner = process.env.source_owner;
            const sourceRepo = process.env.source_repo;

            if (!problemName || !sourceOwner || !sourceRepo) {
              console.error("Missing problem_name, source_owner, or source_repo in event payload.");
              process.exit(1);
            }

            console.log(`Syncing problem: ${problemName} from ${sourceOwner}/${sourceRepo}`);

            try {
              const { data: problemContents } = await github.rest.repos.getContent({
                owner: sourceOwner,
                repo: sourceRepo,
                path: `processed-problems/${problemName}`,
                ref: 'main'
              });
              
              if (!fs.existsSync('problems')) {
                fs.mkdirSync('problems', { recursive: true });
              }
              const problemDir = `problems/${problemName}`;
              if (!fs.existsSync(problemDir)) {
                fs.mkdirSync(problemDir, { recursive: true });
              }
              
              for (const item of problemContents) {
                if (item.type === 'file') {
                  const { data: fileContent } = await github.rest.repos.getContent({
                    owner: sourceOwner,
                    repo: sourceRepo,
                    path: item.path,
                    ref: 'main'
                  });
                  const fileName = path.basename(item.path);
                  const content = Buffer.from(fileContent.content, 'base64').toString('utf8');
                  fs.writeFileSync(path.join(problemDir, fileName), content);
                  console.log(`Downloaded: ${fileName}`);
                } else if (item.type === 'dir') {
                  const subDir = path.join(problemDir, item.name);
                  if (!fs.existsSync(subDir)) {
                    fs.mkdirSync(subDir, { recursive: true });
                  }
                  const { data: subContents } = await github.rest.repos.getContent({
                    owner: sourceOwner,
                    repo: sourceRepo,
                    path: item.path,
                    ref: 'main'
                  });
                  for (const subItem of subContents) {
                    if (subItem.type === 'file') {
                      const { data: subFileContent } = await github.rest.repos.getContent({
                        owner: sourceOwner,
                        repo: sourceRepo,
                        path: subItem.path,
                        ref: 'main'
                      });
                      const subFileName = path.basename(subItem.path);
                      const subContent = Buffer.from(subFileContent.content, 'base64').toString('utf8');
                      fs.writeFileSync(path.join(subDir, subFileName), subContent);
                      console.log(`Downloaded: ${item.name}/${subFileName}`);
                    }
                  }
                }
              }
              console.log(`✅ Successfully synced problem: ${problemName}`);
              execSync(`echo "PROBLEM_SYNCED=true" >> $GITHUB_ENV`);
              execSync(`echo "PROBLEM_NAME=${problemName}" >> $GITHUB_ENV`);
            } catch (error) {
              console.error(`❌ Error syncing problem: ${error.message}`);
              process.exit(1);
            }
  
      - name: Update database schema if needed
        run: |
          echo "🔄 Checking if database update is needed..."
          npx prisma generate --schema=packages/db/prisma/schema.prisma
          # For other commands, also specify the schema, for example:
          # npx prisma migrate deploy --schema=packages/db/prisma/schema.prisma
          echo "✅ Database schema check completed"

      - name: Run tests on new problem
        run: |
          echo "🧪 Running tests on synced problem..."
          PROBLEM_NAME="${{ env.PROBLEM_NAME }}"
          node -e "
            const { getProblems } = require('./app/lib/problems');
            try {
              const problems = getProblems();
              const newProblem = problems.find(p => p.id === '$PROBLEM_NAME');
              if (newProblem) {
                console.log('✅ Problem loaded successfully:', newProblem.title);
              } else {
                console.log('❌ Problem not found in problems list');
                process.exit(1);
              }
            } catch (error) {
              console.error('❌ Error loading problem:', error.message);
              process.exit(1);
            }
          "

      - name: Create pull request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "Add new problem: ${{ env.PROBLEM_NAME }}"
          title: "🆕 New Problem: ${{ env.PROBLEM_NAME }}"
          body: |
            ## 🎯 New Problem Added

            **Problem:** ${{ env.PROBLEM_NAME }}
            **Source:** ${{ env.source_owner }}/${{ env.source_repo }}

            ### Changes
            - ✅ Problem synced from admin repository
            - ✅ Boilerplate code generated
            - ✅ Test cases included
            - ✅ Database schema verified
            - ✅ Problem loading tested

            ### Problem Files
            - `problems/${{ env.PROBLEM_NAME }}/Problem.md` - Problem statement
            - `problems/${{ env.PROBLEM_NAME }}/Structure.md` - Problem metadata  
            - `problems/${{ env.PROBLEM_NAME }}/tests/` - Test cases
            - `problems/${{ env.PROBLEM_NAME }}/boilerplate/` - Code templates
            - `problems/${{ env.PROBLEM_NAME }}/boilerplate-full/` - Full templates

            This PR was automatically created by the problem sync workflow.

            ### Next Steps
            1. Review problem content and quality
            2. Test the problem in development environment
            3. Merge to deploy to production

            🚀 Ready for review!
          branch: sync/problem-${{ env.PROBLEM_NAME }}
          delete-branch: true

      - name: Auto-merge if tests pass
        uses: actions/github-script@v6
        if: env.PROBLEM_SYNCED == 'true'
        with:
          script: |
            const problemName = process.env.PROBLEM_NAME;
            await new Promise(resolve => setTimeout(resolve, 5000));
            const { data: pulls } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: `sync/problem-${problemName}`,
              state: 'open'
            });
            if (pulls.length > 0) {
              const pr = pulls[0];
              console.log(`Found PR #${pr.number} for problem ${problemName}`);
              try {
                await github.rest.pulls.createReview({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: pr.number,
                  event: 'APPROVE',
                  body: '🤖 Automated approval: Problem validation passed'
                });
                await github.rest.pulls.merge({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: pr.number,
                  commit_title: `Add new problem: ${problemName}`,
                  commit_message: `Automatically merged problem from admin repository`,
                  merge_method: 'squash'
                });
                console.log(`✅ Successfully merged PR #${pr.number}`);
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pr.number,
                  body: `🎉 Problem **${problemName}** has been successfully deployed and is now live on CodeQuest!`
                });
              } catch (error) {
                console.error(`Failed to auto-merge: ${error.message}`);
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pr.number,
                  body: `⚠️ Auto-merge failed. Manual review required for problem **${problemName}**.`
                });
              }
            }

      - name: Notify admin repository
        uses: actions/github-script@v6
        if: always()
        with:
          github-token: ${{ secrets.ADMIN_REPO_TOKEN }}
          script: |
            const problemName = process.env.problem_name;
            const success = process.env.PROBLEM_SYNCED === 'true';
            const message = success 
              ? `✅ Problem **${problemName}** successfully deployed to production!`
              : `❌ Failed to deploy problem **${problemName}**. Check logs for details.`;
            console.log(message);
            // Optionally, create an issue or comment in admin repo here to track deployment status
